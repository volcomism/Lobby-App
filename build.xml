<project name="Lobby App" default="build">

  <!-- Set up properties for Jenkins to override if necessary. -->
  <property name="SHELL_CMD" value="/bin/sh" />
  <property name="SHELL_OPT" value="-c" />

  <property environment="env" />

  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${basedir}/build" includes="**/*"/>
    </delete>
    <delete dir="${basedir}/node_modules" />
    <delete file="${basedir}/lobby.db" />
  </target>

  <target name="dep">
    <exec executable="npm">
      <arg value="install" />
    </exec>
  </target>
  <target name="database" depends="dep">
    <delete file="${basedir}/lobby.db" />
    <exec executable="node">
      <arg value="initialize-db" />
    </exec>
  </target>
  <target name="database-dev" depends="database">
    <exec executable="node">
      <arg value="populate-with-demo-data" />
    </exec>
  </target>

  <target name="install">
    <echo>You are going to be installing Lobby App,</echo>
    <echo>a sign-in application that uses DocuSign technology.</echo>
    <echo />
    <echo>The DocuSign Terms and Conditions is fully defined here:</echo>
    <echo>http://www.docusign.com/company/terms-and-conditions/web</echo>
    <echo />
    <input
      message="Do you agree to this?"
      validargs="y,n"
      addproperty="do.it"
    />
    <condition property="do.abort">
      <equals arg1="n" arg2="${do.it}"/>
    </condition>
    <fail if="do.abort">Build aborted by user.</fail>
    <antcall target="dep" />
    <antcall target="database" />
  </target>
  <target name="daemon">
    <copy file="lobby.conf" todir="/etc/init" overwrite="true">
      <filterset>
        <filter token="LOBBY_DIR" value="${env.PWD}" />
      </filterset>
    </copy>
  </target>

  <target name="test" depends="database-dev">
    <exec executable="mocha">
      <env key="LOBBY_APP_QUIET" value="1" />
    </exec>
  </target>
  <target name="test-xunit" depends="database-dev">
    <exec executable="${SHELL_CMD}">
      <env key="LOBBY_APP_QUIET" value="1" />
      <arg value="${SHELL_OPT}" />
      <arg value="mocha --reporter xunit &gt; build/xunit.xml" />
    </exec>
  </target>
  <target name="coverage">
    <exec executable="jscoverage">
      <arg value="--no-highlight" />
      <arg value="routes" />
      <arg value="routes-cov" />
    </exec>
    <exec executable="${SHELL_CMD}">
      <env key="LOBBY_APP_QUIET" value="1" />
      <env key="LOBBY_APP_COV" value="1" />
      <arg value="${SHELL_OPT}" />
      <arg value="mocha -R html-cov &gt; build/coverage.html" />
    </exec>
    <exec executable="rm">
      <arg value="-rf" />
      <arg value="routes-cov" />
    </exec>
  </target>

  <target name="dist-deploy">
    <copy file="default_integrator_key.template" tofile="default_integrator_key.js" overwrite="true">
      <filterset>
        <filtersfile file="deploy.properties" />
      </filterset>
    </copy>
    <zip destfile="${basedir}/build/package.zip"
         basedir="${basedir}"
         excludes="build/**, node_modules/**, **/*.swp, **/*.db, .gitignore, .git/**, public/images/logo.png, **/*.template, **/*.properties"
    />
  </target>
  <target name="build-deploy" depends="database,dist-deploy" />

  <target name="dist">
    <copy file="default_integrator_key.template" tofile="default_integrator_key.js" overwrite="true">
      <filterset>
        <filter token="INTEGRATOR_KEY" value="" />
      </filterset>
    </copy>
    <zip destfile="${basedir}/build/package.zip"
         basedir="${basedir}"
         excludes="build/**, node_modules/**, **/*.swp, **/*.db, .gitignore, .git/**, public/images/logo.png, **/*.template, **/*.properties"
    />
  </target>
  <target name="build" depends="database,dist" />

</project>
